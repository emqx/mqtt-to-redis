authorization {
  cache {
    enable = true
    max_size = 32
    ttl = "1m"
  }
  deny_action = "ignore"
  no_match = "allow"
  sources = [
    {
      enable = true
      path = "data/authz/acl.conf"
      type = "file"
    }
  ]
}
bridges {
  redis_single {
    "authz-event" {
      command_template = ["HINCRBY", "authz_source", "${authz_source}", "1"]
      database = 0
      enable = true
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
    "authz-event-reason" {
      command_template = ["HINCRBY", "authz_result", "${result}:${action}", "1"]
      database = 0
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
    "disconnected-event" {
      command_template = ["HINCRBY", "disconnected_reason", "${reason}", "1"]
      database = 0
      enable = true
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
    "message-dropped" {
      command_template = ["HINCRBY", "emqx_message_dropped_count", "${topic}", "1"]
      database = 0
      enable = true
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
    "message-dropped-by-reason" {
      command_template = ["HINCRBY", "message_dropped_reason", "${reason}", "1"]
      database = 0
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
    "store-last-message" {
      command_template = ["HSET", "emqx_messages", "${clientid}", "${payload.temp}"]
      database = 0
      enable = true
      pool_size = 8
      redis_type = "single"
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "redis:6379"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
    }
  }
}
mqtt {
  max_mqueue_len = 10
  max_packet_size = "1KB"
  max_qos_allowed = 1
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    "handle-authz-event" {
      actions = ["redis_single:authz-event", "redis_single:authz-event-reason"]
      description = ""
      enable = true
      metadata {created_at = 1690174091861}
      sql = "SELECT\n  *\nFROM\n  \"$events/client_check_authz_complete\""
    }
    "handle-disconnected-event" {
      actions = ["redis_single:disconnected-event"]
      description = ""
      metadata {created_at = 1690176014312}
      sql = "SELECT\n  *\nFROM\n  \"$events/client_disconnected\""
    }
    "handle-message-dropped" {
      actions = ["redis_single:message-dropped", "redis_single:message-dropped-by-reason"]
      description = ""
      enable = true
      metadata {created_at = 1690172957809}
      name = ""
      sql = "SELECT\n  *\nFROM\n  \"$events/message_dropped\", \"$events/delivery_dropped\""
    }
    "store-last-message" {
      actions = ["redis_single:store-last-message"]
      description = ""
      metadata {created_at = 1690173938298}
      sql = "SELECT\n  *\nFROM\n  \"store-last-message/+\""
    }
  }
}
